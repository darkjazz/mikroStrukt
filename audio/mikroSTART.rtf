{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 ~mikro = \cf2 Mikro\cf0 ( liveInput: \cf2 true\cf0 , decoder: \cf2 Decoder\cf0 ()).gui\
\
~eq = \cf2 MasterEQ\cf0 (4)\
\
~mikro.loadTestBuffers(\cf3 "/Users/alo/sounds/eclambone_samples/*"\cf0 );\
\
~mikro.startSOM(\cf3 "/Users/alo/Development/som/visual/build/Debug/som.app"\cf0 );\
\
~mikro.regionMap = #[\
	bufplay,bufplay,tyhi,rwarp,\
	bufplay,bufplay,rwarp,tyhi,\
	swarp,swarp,bufmod,bufmod,\
	swarp,swarp,bufmod,bufmod\
];\
\
\
(\
~mikro.initSOM(\
	somSizeX: 40,\
	somSizeY: 40,\
	somVectorSize: 6,\
	somTrainDur: 1000,\
	somLearningRate: 0.2\
);\
\
\
)\
\
s.scope(4)\
\
~mikro.initPerformance(1.0, 0.0);\
\
~mikro.remote.sendMsg(\cf3 "/som/init"\cf0 , 1000, 40, 40, 0.2);\
\
~mikro.startMFCC;\
\
~mikro.startRecorder;\
\
~mikro.seqActive = \cf2 true\cf0 \
\
~mikro.inputBuffers.do(\cf2 _\cf0 .postln)\
\
~mikro.startLiveSynth(\cf4 \\grains\cf0 , \cf2 Env\cf0 ([0, 1, 1, 0], [0.1, 0.4, 0.5], \cf4 \\sine\cf0 , 2, 1) )\
\
~mikro.freeSynth(1006, 1)\
\
~mikro.freeSynth(1003, 1)\
\
~mikro.addBmuFunction(\cf4 \\playBufs\cf0 , \{\cf2 |bmu, distSlope, vecSlope, intervals|\cf0 \
	~mikro.startBufSynth(\cf4 \\bufplay\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 0.001], [0.1, 0.9], \cf4 \\sine\cf0 ), \
		~mikro.inputBuffers.last, 0, rrand(1.0, 2.0).round(0.125), (1..4).choose)\
\});\
\
~mikro.addBmuFunction(\cf4 \\params\cf0 , \{\cf2 |bmu|\cf0 \
	\cf2 var\cf0  vect = \cf2 Pseq\cf0 (bmu.vector, \cf2 inf\cf0 ).asStream;\
	~mikro.activeLiveSynths.do(\{\cf2 |synth|\cf0 \
		~mikro.liveProcs.[synth.defName.asSymbol].specs.keysValuesDo(\{\cf2 |key, spec|\cf0 \
			synth.set(key, spec.map(vect.next))\
		\})\
	\})\
\})\
\
~mikro.startBufSynth(\cf4 \\bufplay\cf0 , \cf2 Env\cf0 ([0.001, 1.0, 0.5, 0.001], [0.001, 0.6, 0.4], \cf4 \\sine\cf0 ), \
	~mikro.inputBuffers.choose, ~mikro.inputBuffers.choose, 10,  3)\
\
\
~mikro.addBmuFunction(\cf4 \\zoom\cf0 , \{\cf2 |bmu|\cf0 \
	\cf2 var\cf0  spec;\
	spec = [-4, -48].asSpec;\
	~mikro.remote.sendMsg(\cf3 "/som/zoom"\cf0 , spec.map(bmu.vector[0].clip(0.0, 1.0)))\
\})\
\
~mikro.remote.sendMsg(\cf3 "/som/zoom"\cf0 , -48)\
\
~mikro.removeBmuFunction(\cf4 \\playBufs\cf0 )\
\
\cf2 MasterEQ\cf0 (4)\
\
~mikro.stopRecorder;\
\
~mikro.stopMFCC;\
\
~mikro.freeInput;\
\
~mikro.seqActive\
\
\
~mikro.inputBuffers\
\
~mikro.decoder.free\
\
~mikro.quitSOM\
\
~mikro.activeBufSynths\
\
~mikro.intervals.dict.keys(\cf2 Array\cf0 ).sort.do(\cf2 _\cf0 .postln)\
\
~mikro.activeLiveSynths.do(\cf2 _\cf0 .free)\
\
s.sendMsg(\cf3 "/n_free"\cf0 , 1178)\
\
~mikro.freeSynth(1295, 2)\
\
~mikro.regionMap = #[\
	bufplay,bufplay,bufplay,bufplay,\
	bufplay,bufplay,bufplay,bufplay,\
	bufplay,bufplay,bufplay,bufplay,\
	bufplay,bufplay,bufplay,bufplay\
];\
~mikro.regionMap = #[\
	bufplay,bufplay,tyhi,tyhi,\
	bufplay,bufplay,tyhi,tyhi,\
	swarp,swarp,rwarp,rwarp,\
	swarp,swarp,rwarp,rwarp\
];\
\
~mikro.regionMap = #[\
	fbgverb,fbgverb,latch,cliq,\
	grains,grains,streamverb,grains,\
	pch,bufplay,bufplay,bufmod,\
	tyhi,bufplay,swarp,rwarp\
];}