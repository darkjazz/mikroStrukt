{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
~buffers = \cf3 Array\cf2 ();\
\cf4 "/Users/alo/sounds/eclambone_samples/*"\cf2 .pathMatch.do(\{\cf3 |path|\cf2 \
	~buffers = ~buffers.add(\cf3 Buffer\cf2 .read(s, path))\
\});\
)\
\
~buffers.collect(\cf3 _\cf2 .path).do(\cf3 _\cf2 .postln)\
\
(\
~inputs = 5;\
\
\cf3 SynthDef\cf2 (\cf5 \\playPatch\cf2 , \{\cf3 |out, buf, amp|\cf2 \
	\cf3 var\cf2  sig;\
	sig = \cf3 PlayBuf\cf2 .ar(1, buf, loop: 0, doneAction: 2);\
	\cf3 Out\cf2 .ar(out, sig);\
	\cf3 Out\cf2 .ar(0, sig.dup * amp)\
\}).add;\
\
\cf3 SynthDef\cf2 (\cf5 \\train\cf2 , \{\cf3 |in, th|\cf2 \
	\cf3 var\cf2  remain, error, input, fft, mfcc, onsets, spec, rectrig;\
	input = \cf3 In\cf2 .ar(in);\
	fft = \cf3 FFT\cf2 (\cf3 LocalBuf\cf2 (1024), input);\
	onsets = \cf3 Onsets\cf2 .kr(fft, th);\
	mfcc = \cf3 MFCC\cf2 .kr(fft, ~inputs);\
	\cf3 SendReply\cf2 .kr(onsets, \cf5 '/mfcc'\cf2 , mfcc ++ [\cf3 SpecFlatness\cf2 .kr(fft)] );\
\}).add;\
\
)\
\
~mfsom.trainCount\
\
(\
~mfsom = \cf3 SOMap\cf2 (3000, 40, ~inputs + 1, 0.0, 1.0);\
\
~ecdict = \cf3 Event\cf2 ();\
\
32.do(\{\cf3 |i|\cf2  \
	\cf3 var\cf2  str = \cf4 ""\cf2 ;\
	i.asBinaryDigits(5).do(\{\cf3 |dg|\cf2  str = str ++ dg.asString \});\
	str = str.insert(2, \cf4 "_"\cf2 );\
	~ecdict[str.asSymbol] = (\
		hits: 0, \
		left: 39@20, \
		right: 0@20, \
		top: 20@39, \
		bottom: 20@0,\
		vector: \cf3 Array\cf2 .rand(6, 0.0, 1.0));\
\});\
\
~mfwin = \cf3 Window\cf2 (\cf4 "..som.."\cf2 , \cf3 Rect\cf2 (100, 100, ~mfsom.size * 10 + 10, ~mfsom.size * 10 + 30)).front;\
~mfwin.background = \cf3 Color\cf2 .grey(0.01);\
t = \cf3 StaticText\cf2 (~mfwin, \cf3 Rect\cf2 (5, ~mfsom.size * 10 + 5, ~mfsom.size * 10, 20))\
	.font_(\cf3 Font\cf2 (\cf4 "Skia"\cf2 , 10))\
	.align_(\cf5 \\center\cf2 )\
	.stringColor_(\cf3 Color\cf2 .grey(0.7))\
	.string_(\cf4 ""\cf2 );\
~mfwin.drawHook = \{\
	\cf3 var\cf2  bmu;\
	~mfsom.do(\{\cf3 |node, i, j|\cf2 \
		\cf3 var\cf2  size, weights;\
		weights = node.weights;\
		\cf3 Pen\cf2 .color = \cf3 Color\cf2 .grey(1 - weights[5], weights[5]);\
\cf6 //		Pen.fillRect(Rect(i*10+5, j*10+5, 10, 10));\cf2 \
		\cf3 Pen\cf2 .fillRect(\cf3 Rect\cf2 (i*10+5, j*10+5, 10, 3));\
		\cf3 Pen\cf2 .color = \cf3 Color\cf2 (*(weights[0..2] ++ (1.0 - weights[3] * 0.5)));\
		size = weights[4].linlin(0, 1, 0.25, 2.0);			\cf3 Pen\cf2 .fillRect(\cf3 Rect\cf2 (i*10+5+(10-(size*10)/2),j*10+10, 10*size, 3));\
\cf6 //		Pen.fillRect(Rect(i*10+5+(10-(size*10)/2),j*10+5+(10-(size*10)/2), 10*size, 10*size));\cf2 \
		if (~mfbmu.notNil)\
		\{\
			if ((i == ~mfbmu.coords.x).and(j == ~mfbmu.coords.y))\
			\{\
				\cf3 Pen\cf2 .color = \cf3 Color\cf2 .grey(0.8, 0.2);\
				\cf3 Pen\cf2 .fillOval(\cf3 Rect\cf2 (i*10+5,j*10+5, 10, 10));\
			\}\
		\};\
		if (~avgbmu.notNil)\
		\{\
			if ((i == ~avgbmu.coords.x).and(j == ~avgbmu.coords.y))\
			\{\
				\cf3 Pen\cf2 .color = \cf3 Color\cf2 .grey(0.5, 0.2);\
				\cf3 Pen\cf2 .strokeOval(\cf3 Rect\cf2 (i*10+5,j*10+5, 10, 10));\
			\}	\
		\};\
\
		if (i < 39) \{\
			\cf3 Pen\cf2 .color = \cf3 Color\cf2 (0.5, 0.5, \
				(node.weights - ~mfsom.nodes[i+1][j].weights).squared.sum.sqrt * 2, 0.5 );\
			\cf3 Pen\cf2 .line(\cf3 Point\cf2 (i*10+15, j*10+5), \cf3 Point\cf2 (i*10+15, j*10+15));\
			\cf3 Pen\cf2 .stroke;\
		\};\
		\
		if (j < 39) \{\
			\cf3 Pen\cf2 .color = \cf3 Color\cf2 (0.5, 0.5, \
				(node.weights - ~mfsom.nodes[i][j+1].weights).squared.sum.sqrt * 2, 0.5 );\
			\cf3 Pen\cf2 .line(\cf3 Point\cf2 (i*10+5, j*10+15), \cf3 Point\cf2 (i*10+15, j*10+15));\
			\cf3 Pen\cf2 .stroke;\
		\};\
		\
		\
	\});\
		\
	if (~currentPatchKey.notNil)\
	\{\
		\cf3 Pen\cf2 .color = \cf3 Color\cf2 .white;\
		\cf3 Pen\cf2 .line(~ecdict[~currentPatchKey].left*10+5, ~ecdict[~currentPatchKey].top*10+5);\
		\cf3 Pen\cf2 .line(~ecdict[~currentPatchKey].top*10+5, ~ecdict[~currentPatchKey].right*10+5);\
		\cf3 Pen\cf2 .line(~ecdict[~currentPatchKey].right*10+5, ~ecdict[~currentPatchKey].bottom*10+5);\
		\cf3 Pen\cf2 .line(~ecdict[~currentPatchKey].bottom*10+5, ~ecdict[~currentPatchKey].left*10+5);\
		\cf3 Pen\cf2 .stroke;\
	\
		\cf3 Pen\cf2 .font = \cf3 Font\cf2 (\cf4 "Inconsolata"\cf2 , 7);\
		bmu = ~mfsom.findBMU(~ecdict[~currentPatchKey].vector);\
		\cf3 Pen\cf2 .stringInRect(~currentPatchKey.asString, \cf3 Rect\cf2 (bmu.coords.x*10, bmu.coords.y*10+5, 30, 10))\
	\}\
	\
\cf6 //	~ecdict.keysValuesDo(\{|key, val|\cf2 \
\cf6 //		var bmu;\cf2 \
\cf6 //		Pen.color = Color.white;\cf2 \
\cf6 //		Pen.line(~ecdict[key].left*10+5, ~ecdict[key].top*10+5);\cf2 \
\cf6 //		Pen.line(~ecdict[key].top*10+5, ~ecdict[key].right*10+5);\cf2 \
\cf6 //		Pen.line(~ecdict[key].right*10+5, ~ecdict[key].bottom*10+5);\cf2 \
\cf6 //		Pen.line(~ecdict[key].bottom*10+5, ~ecdict[key].left*10+5);\cf2 \
\cf6 //		Pen.stroke;\cf2 \
\cf6 //		Pen.font = Font("Inconsolata", 7);\cf2 \
\cf6 //		bmu = ~mfsom.findBMU(val.vector);\cf2 \
\cf6 //		Pen.stringInRect(key.asString, Rect(bmu.coords.x*10, bmu.coords.y*10+5, 30, 10))\cf2 \
\cf6 //	\})	\cf2 \
\};\
\
)\
\
\
\cf3 Routine\cf2 (\{\
	~ecdict.keys(\cf3 Array\cf2 ).sort.do(\{\cf3 |it|\cf2 \
		~currentPatchKey = it;\
		\{ ~mfwin.refresh \}.defer;\
		2.wait;\
	\})\
\}).play\
\
~mfsom.trainCount\
\
(\
\
\cf3 var\cf2  bus, som, mfres, spres, bmus;\
\
bmus = \cf3 Array\cf2 .fill(5, \{ \cf3 Array\cf2 .rand(6, 0.0, 1.0) \});\
\
mfres = \cf3 OSCresponderNode\cf2 (s.addr, \cf5 '/mfcc'\cf2 , \{\cf3 |ti, re, ms|\cf2  \
	if (~mfsom.trainCount < ~mfsom.trainDuration) \
		\{ ~mfbmu = ~mfsom.train(ms[3..8]) \}\
		\{ ~mfbmu = ~mfsom.findBMU(ms[3..8]) \};\
	bmus.pop;\
	bmus.insert(0, ~mfbmu.weights);\
	~avgbmu = ~mfsom.findBMU(bmus.sum / bmus.size);\
	if (~currentPatchKey.notNil)\
	\{\
		~ecdict[~currentPatchKey].hits = ~ecdict[~currentPatchKey].hits + 1;\
		~ecdict[~currentPatchKey].vector = ~ecdict[~currentPatchKey].vector \
			* ~ecdict[~currentPatchKey].hits + ~avgbmu.weights / (~ecdict[~currentPatchKey].hits + 1);\
		if (~avgbmu.coords.x < ~ecdict[~currentPatchKey].left.x) \{ \
			~ecdict[~currentPatchKey].left.x = ~ecdict[~currentPatchKey].left.x * \
				~ecdict[~currentPatchKey].hits + ~avgbmu.coords.x / (~ecdict[~currentPatchKey].hits + 1);\
		\};\
		if (~avgbmu.coords.x > ~ecdict[~currentPatchKey].right.x) \{ \
			~ecdict[~currentPatchKey].right.x = ~ecdict[~currentPatchKey].right.x * \
				~ecdict[~currentPatchKey].hits + ~avgbmu.coords.x / (~ecdict[~currentPatchKey].hits + 1);\
		\};\
		if (~avgbmu.coords.y < ~ecdict[~currentPatchKey].top.y) \{ \
			~ecdict[~currentPatchKey].top.y = ~ecdict[~currentPatchKey].top.y * \
				~ecdict[~currentPatchKey].hits + ~avgbmu.coords.y / (~ecdict[~currentPatchKey].hits + 1);\
		\};\
		if (~avgbmu.coords.y > ~ecdict[~currentPatchKey].bottom.y) \{ \
			~ecdict[~currentPatchKey].bottom.y = ~ecdict[~currentPatchKey].bottom.y * \
				~ecdict[~currentPatchKey].hits + ~avgbmu.coords.x / (~ecdict[~currentPatchKey].hits + 1);\
		\};\
	\};\
	\{ ~mfwin.refresh \}.defer;\
\}).add;\
\
\cf3 CmdPeriod\cf2 .add(\{ \
	mfres.remove; \
\});\
bus = \cf3 Bus\cf2 .audio(s);\
som = \cf3 Synth\cf2 (\cf5 \\train\cf2 , [\cf5 \\in\cf2 , bus, \cf5 \\th\cf2 , -30.dbamp]);\
\
\cf3 Routine\cf2 (\{\
	\{ ~timer = \cf3 TimeDisplay\cf2 ().start \}.defer;\
	\cf3 inf\cf2 .do(\{\
		~buffers.scramble.do(\{\cf3 |buf|\cf2 \
			\cf3 var\cf2  dur;\
			dur = buf.numFrames / buf.sampleRate;\
			\{ t.string_( buf.path.basename ) \}.defer;\
			~currentPatchKey = buf.path.basename.split($.)[0].keep(6).asSymbol;\
			\cf3 Synth\cf2 .before(som, \cf5 \\playPatch\cf2 , [\cf5 \\out\cf2 , bus, \cf5 \\buf\cf2 , buf]);\
			dur.wait;\
		\})\
	\})\
	\
\}).play\
\
)\
\
~ecdict.keysValuesDo(\{\cf3 |key, value|\cf2  \
	value.count.postln\
\})\
\
~mfsom.do(\cf3 _\cf2 .postln)\
\
.weights.postln\
~ecdict\
\
a = \cf3 Array\cf2 .fill(5, \{ \cf3 Array\cf2 .rand(6, 0.0, 1.0) \});\
\
a.sum / a.size}